{
  "hash": "68c5c03c16e5899d079d6959678a5ec1",
  "result": {
    "markdown": "---\ntitle: The Itemizer\ndate: 2013-04-24\nauthor: \"Derek Willis\"\nformat:\n  html:\n    df-print: paged\n    toc: true\nengine: knitr\n---\n\n\nHere's a little secret about me: I love campaign finance data.\n\nOk, so that's [no secret at all](https://twitter.com/campfinmoments), and it's probably unhealthy in some respects. But let's face it, campaign finance data provides a rich source of information for stories, blog posts and tweets, in rough descending order of size and scope. There's one thing that has always bugged me about how we reference campaign finance data online: the best that most of us can do when we link to a campaign filing is to link to a particular page, whether that's [a list of contributors](http://query.nictusa.com/cgi-bin/dcdev/forms/C00271312/868832/sa/ALL) or [a summary page](http://query.nictusa.com/cgi-bin/dcdev/forms/C00452144/868805/). Yet often we're referencing a single transaction or line-item.\n\nI started to think more about this after listening to [David Cohn talk about Circa at the Journalism Interactive conference](http://ji2013.sched.org/event/2b8aa8249e92fce2f81c3a3ceccf68df?iframe=no&w=680&sidebar=no&bg=no#.UXh_ClvWEbo) in February. [Circa](http://cir.ca/about/) \"is creating the first born-on-mobile news experience, delivering it in a format native to mobile devices, with an experience intuitive to mobile users,\" and part of that means breaking down what we think of as stories into their essential components. Those usually are statements or facts of some kind that can readers into a larger story. This \"atomization\" of news, [as David called it in his presentation](http://www.slideshare.net/JIConf/circa-message), focuses tightly on the core elements of a story.\n\nFor people who work with data and love to cite it in stories, this is a good idea. It got me thinking about how we could do that for campaign finance data, where transactions are the smallest particle. What I've come up with, with the assistance of Aaron Bycoffe, is [The Itemizer](http://itemizer.herokuapp.com/), a simple app that takes itemized records from Federal Election Commission filings and allows you to link to them. If you want to specifically reference the $1,000 that the Society of American Florists PAC gave to Nydia Velazquez, [now you can](http://itemizer.herokuapp.com/filing/868832/schedule/sa#VN89J1EW3Y1).\n\nWhen I say simple, [I mean it](https://github.com/dwillis/itemizer). It's a Rails 3.2 app, but it could just as easily be implemented in Sinatra, given how small it is. The anchor links are based on the transaction IDs from the filings, so there's no need to invent unique hashes or anything. Thanks to the [Campaign Cash](http://nytimes.github.io/campaign_cash/) and [Fech](http://nytimes.github.io/Fech/) Ruby gems, the page loads today's filings and then constructs links to receipts and expenditures (other schedules are coming). Nothing is stored in a database - Campaign Cash pulls in the day's filings from [The New York Times Campaign Finance API](http://developer.nytimes.com/docs/campaign_finance_api/) and Fech processes individual filings on the fly. Although the default is to today's filings, if you know the filing number, you can plug it and the schedule into the URL and it'll just work.\n\nAlthough it was relatively simple to build and deploy (thanks, Heroku!), I don't expect the FEC to do something like this anytime soon, although I'd be happy if they did. More certainty, tighter focus, more direct references -- these are good things for journalism. If you have ideas on improving The Itemizer, please join in. Or better yet, build one for a similar data set that you work with so even more people can benefit.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}