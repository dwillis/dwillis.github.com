{
  "hash": "e1fed77a57a972f2345b7a23b5404b71",
  "result": {
    "markdown": "---\ntitle: Xpdf on the Mac\ndate: 2005-05-18\nauthor: \"Derek Willis\"\nformat:\n  html:\n    df-print: paged\n    toc: true\nengine: knitr\n---\n\n\nLast year I wrote a piece for Uplink on using [Xpdf](http://www.foolabs.com/xpdf/download.html) to convert PDF documents into text tables, but that piece focused on using xpdf on Win32 systems. Here's an adapted guide to installing and using Xpdf on the Mac.\n\nHere's a question that should have a familiar ring: How do I get text out of a PDF file?\n\nPainfully, if your experience has been anything like mine.\n\nThe mere existence of Adobe Acrobat files has been a boon for reporters because governments and agencies everywhere have been able to make documents broadly available over the Internet. It's hard not to love that.\n\nBut if you've ever tried getting tables out of a PDF document – and we've all tried – the results usually aren't worth the effort. Until now.\n\nA free command line utility called Xpdf will save you time and aggravation. It will, in most circumstances, enable you to go from PDF to Excel in a matter of seconds, rather than minutes or hours. Did I mention that it's free?\n\nYou can find [Xpdf](http://www.foolabs.com/xpdf/download.html) and it comes in packages for Windows and Linux/Unix. OS X users should download the source code (at this writing the file is xpdf-3.00.tar.gz) to their desktop. That file will expand into a folder labeled xpdf-3.00. Open up the Terminal and type the following (hit return after each step):\n\ncd Desktop\ncd xpdf-3.00\n./configure\n\nThis will take a minute or so. Then type:\n\nmake\n\nAgain, you'll wait a few minutes until it finishes, then:\n\nmake install\n\nYou may have to use \"sudo make\" and, when prompted, enter the password for your computer.\n\nOnce xpdf installs, you can put a PDF file anywhere in your home directory (I usually have a single folder for this) and navigate to that directory in the Terminal using \"cd /location of file\", and then typing:\n\npdftotext -layout pdfname.pdf\n\nDepending on the size of the PDF file, your output text file (with the same name as the original) will be in the same folder in a matter of seconds.\n\nLet's go through the command line syntax. First, the command \"pdftotext\" is required for this process, and \"pdf2text\" won't work. The \"-layout\" tag tells Xpdf that you want to preserve the layout that the PDF file uses, which keeps the text in those nice, clean tables. And you need to have the fullname of the file (I recommend a single-word name, even though Windows supports filenames with spaces). That's it.\n\nThe resulting text file will be the entire text of the PDF, meaning that you may have to wade through pages of text in order to get to your tables. The preservation of the PDF's layout means that if a page contained two tables side-by-side, that's the way they will look in the text file, too.\n\nXpdf doesn't work in all instances; specifically, it won't convert PDFs that have been locked by their creators. Don't bother asking the author of Xpdf, either, as he has posted a message on his Web site indicating that he will not add that ability.\n\nBut for most government documents, Xpdf can be a huge time-saver and allow you to spend more time actually analyzing data rather than trying to free it from the confines of the PDF.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}