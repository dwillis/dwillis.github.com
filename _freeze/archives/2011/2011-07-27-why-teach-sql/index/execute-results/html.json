{
  "hash": "1322d5196aae18c7e0c5de3eda0aeadd",
  "result": {
    "markdown": "---\ntitle: Why Teach SQL?\ndate: 2011-07-27\nauthor: \"Derek Willis\"\nformat:\n  html:\n    df-print: paged\n    toc: true\nengine: knitr\n---\n\n\nThere was an interesting discussion on the NICAR-L listserv today about teaching database skills. More specifically, which software to teach and how to teach it. Should you go with SQLite, as I do? What about MS Access (the consensus [seemed to lean against](http://thescoop.org/archives/2009/06/02/the-case-against-teaching-access/))? Is it too much to ask students to install database server software such as MySQL or PostgreSQL?\n\nThese are complicated questions, made moreso by the options now available for teaching database skills. When I attended an IRE database bootcamp in 1997 (taught by my now-colleague Jo Craven McGinty), there were basically three options: the then-young Access, FoxPro or Paradox. Hard to believe, but back then I worked in a newsroom that had [FoxPro](http://en.wikipedia.org/wiki/FoxPro) and [Paradox](http://en.wikipedia.org/wiki/Paradox_(database)), but not really Access (Note: if you are under 30 and reading this, you may not even know what FoxPro and Paradox are. That's ok. They, an in particular FoxPro, were wonderful database managers in their day.)\n\nNot only do we now have open source options (SQLite, MySQL, Postgres) and SQL Server, but we also have a variety of \"database-like\" Web applications, like Fusion Tables and Google Refine, that can do some of the things that only desktop software used to do. And let's face it, Excel is a very powerful tool for data analysis. Many of the things a reporter might want to do to a data file, such as sorting and filtering, are arguably a lot easier in Excel or another spreadsheet.\n\nSo why even teach SQL, then? The reasons I do it, and will continue to, are these:\n\n  1. SQL is an excellent and relatively simple way to enhance your data interviewing skills. When you have to write out your questions, you tend to think about them a little more than if you're just pointing and clicking around. This is why when I had to teach Access, I bypassed the visual query builder. Yes, SQL queries involve writing more than doing an Excel filter, but those syntax errors also make you consider what you're doing, and that's a good thing.\n  2. SQL is still common enough on the Web that teaching it provides an additional branch, if you will, of learning, or at least makes it easier. When I explain how Facebook assembles all your friend's posts, comments and pictures, I usually do so by pointing out the existence of [FQL](https://developers.facebook.com/docs/reference/fql/). If you already know SQL, it's a very small leap to understanding, at a basic level, how Facebook works.\n  3. There are some times when you will absolutely need to use a SQL database. Or, at least, something that's not Excel. Multi-million-row tables. Regular expression-based pattern matching. Intensive, complicated queries. If you haven't explored SQL, you might not know these are even possible, and you might give up.\n\nAs to what to use when teaching SQL, I stick with SQLite despite Sarah Cohen‘s completely valid point that [date and time support](http://www.sqlite.org/lang_datefunc.html) is much more complicated than it should be. Perhaps a new installment of [Troy Thibodeaux's excellent tutorial](https://github.com/tthibo/SQL-Tutorial) will help address that issue. In the meantime, let's keep teaching SQL – and asking questions.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}