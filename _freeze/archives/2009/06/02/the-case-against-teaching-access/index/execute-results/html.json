{
  "hash": "8604581b01f037987729703806cf582e",
  "result": {
    "markdown": "---\ntitle: The Case Against Teaching Access\ndate: 2009-06-02\nauthor: \"Derek Willis\"\nformat:\n  html:\n    df-print: paged\n    toc: true\nengine: knitr\n---\n\n\nI've been at the [Medill School of Journalism](http://www.medill.northwestern.edu/) at Northwestern University since last week, talking to faculty members about using data management and analysis tools (spreadsheets, databases, mapping) in their courses. When they asked me to provide some training on Excel and Access, I agreed, but asked for the chance to make a case for teaching any database but Access to students. Specifically, I suggested that universities and training organizations like [IRE](http://www.ire.org/) teach [SQLite](http://www.sqlite.org/), which has the advantages of being cross-platform and accessible via a [Firefox add-on](https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/). My class this semester at George Washington University and my time here at Medill have only reinforced my conviction on this.\n\n### The Case for Access\n\nBefore I offer the case against using it, let's look at why we would use Access to teach database concepts. First, it's widely available as part of Microsoft's popular Office suite. A lot of news organizations have it already installed, or can do so without much trouble. Second, it has a familiar look and feel for people who have used Excel – sorting and filtering work nearly the same way, for example – and imports and exports Excel files with ease. Third, the [query grid](http://web.archive.org/web/20090926193346/http://www.hostitwise.com/ms_access/microsoft_access_queries.html) that Access has a default makes it easy to get started on actually getting answers from your data.\n\nThat's about it, as far as I'm concerned. I guess you could throw in the ability to generate reports and construct forms, but these are less of an advantage as web-based apps have become more popular and added features. In fact, the last reason I cited, the query grid, isn't really an advantage at all, as I'll explain below.\n\n## The Case Against Access\n\nAccess costs money. In SQLite, MySQL and PostgreSQL, there are superior database programs that are free and open-source. If you're asking your students, many of whom may be buying Mac laptops, to get Access, you're putting an additional burden on them. And if that's all they know once they graduate and manage to land a job, if that place doesn't have Access, they may need to get it (or have nothing at all).\n\nThe Access query grid hides the fact that underneath, Access runs SQL queries. So a user is able to construct and execute a SQL query without writing any [SQL](http://en.wikipedia.org/wiki/SQL) whatsoever. This is, imho, a bad thing, as it makes it possible to get results without actually knowing what you are doing. When we teach the query grid, we're teaching _behavior_ over understanding, or at the very least we're allowing behavior to compete with understanding. And that doesn't even begin to address the issue that the query grid doesn't do everything that SQL can. In terms of teaching, this is critical; we're not properly equipping students for the opportunities and challenges they could face.\n\nAnother issue is data portability: Access databases don't support dumping to a .sql file, which is a great way to transfer SQL data without losing data types. Access does export to many formats, including Excel, CSV and XML, but the lack of SQL dump ability is a pain for transferring data. If you want to send somebody an Access database, you can either send them the entire file (providing they have Access installed), or you can export each of the tables and have them re-import them. And if you do email that .mdb (or now, .accdb) file, be warned that they do get quite big. To demonstrate this, I loaded the same three tables into Access 2007 and SQLite and the Access file was nearly 3 times the size of the SQLite database.\n\nFinally, there's the Web. Know many popular Web sites that run off an Access database? Me neither. If all you know is Access and not the underlying SQL concepts, your transition to a popular server software like MySQL is going to be more difficult. Sure, you say, but it's better than nothing. But as far as the Web goes, Access is almost nothing itself. So why would you teach a program that has very little future on the Web – the platform of today and tomorrow?\n\n### The Case for SQLite\n\nSQLite is my choice for the candidate to replace Access in journalism education. In addition to the advantages listed above, it's also easy to \"install.\" If you can download files, unzip them and move them to a location on your hard drive, you can \"install\" SQLite. If you can install a Firefox add-on, you can manage it in the browser. And you can take your database files home with you or email them around. The add-on supports importing CSV files, SQL dumps and XML (although all databases can have issues with importing XML). It looks and works the same on a PC or a Mac. Most importantly, it demands an understanding of SQL that you can avoid when learning Access.\n\nWhen I first learned SQL at an IRE bootcamp, we were using FoxPro and we learned how to type the SQL commands. That knowledge only becomes more valuable as you learn the limits and possibilities of SQL. Journalism educators and trainers should commit to teaching SQL on the broadest platform possible and with an emphasis on the syntax and meaning of the language itself, not on which buttons to click. Otherwise we risk sending students out into this new journalism world even less-prepared to handle data intelligently, and I don't think we can afford that.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}