---
title: How APIs Help the Newsroom
date: 2010-07-12
author: "Derek Willis"
format:
  html:
    df-print: paged
    toc: true
engine: knitr
---

As nice as it is to [get praised for the civic-mindedness of your work](http://blog.programmableweb.com/2010/07/08/nytimes-shows-how-civic-apis-should-be-built/), the not-so-secret secret about [APIs at The Times](http://developer.nytimes.com/) is that we're the biggest consumer of them. The flexibility and convenience that the [APIs](http://en.wikipedia.org/wiki/Application_programming_interface) provide make it easier to cut down on repetitive manual work and bring new ideas to fruition. Other news organizations can do the same.

This week, for example, we launched a page to [track Republican senators' positions on the nomination of Elena Kagan to the Supreme Court](http://www.nytimes.com/interactive/2010/07/07/us/politics/20100707-kagan-vote-tracker.html). The fabulous graphics department has done things like this in the past, such as with the [House vote on health care](http://www.nytimes.com/interactive/2010/03/16/us/politics/20100316-health-care-dems.html). Both of those graphics were assembled from lots of different pieces of information – electoral results and previous votes among them – and the Kagan data includes stuff like whether the senator in question is running for re-election this year.

You could, of course, ask people to gather up all that information, but if you're going to do something like this more than once, it makes sense to have a way to automate as much as possible. That's where the APIs come in. For the Kagan graphic, we used the [NYT Congress API](http://developer.nytimes.com/docs/congress_api) to pull in information on senators and their votes, which leaves the gathering of information about their statements on Kagan as the lone manual task. In other words, only the stuff that is specific to this app requires manual effort.

Similarly, the new [Districts API we released](http://open.blogs.nytimes.com/2010/07/01/introducing-the-districts-api/) plays well with our other APIs, so that I was able to build a [simple demo app](http://districts-demo.heroku.com/) that takes advantage of the fact that our Congress API, among others, can return [the current member for a particular district](http://developer.nytimes.com/docs/congress_api#h3-current-member).

For newsrooms, the utility of APIs goes beyond creating Web apps. Making data available via APIs is a little like giving the newsroom the ability to ask and answer questions without having to tie down a CAR person for long periods of time. APIs can provide data in whatever format you choose, which means that a wider range of people can take advantage, from graphic artists used to working with XML to reporters comfortable with CSV files. When your data is more accessible and flexible, [the possibilities for doing things with it expands](http://blog.thescoop.org/thefix/the-information-gap/).

So if you have a big local election coming up, having an API for candidate summary data makes it easier to do a quick-and-dirty internal site for reporters and editors to browse, but also gives graphics folks a way to pull in the latest data without having to ask for a spreadsheet. Chances are that if serious data analysis is what you need, that'll be done in some desktop application or database server anyway. The API is just a messenger, albeit one that is always on and able to spawn lots of ideas and experiments.

If you're looking to build an API, remember that it's just a Web application delivering data in a structured format (XML and JSON being two popular formats these days). There are lots of options in terms of what you use to build and serve an API, [so it's important to pay attention to the design](http://help.hackshackers.com/questions/421/how-can-a-news-and-content-platform-build-a-great-api): which information you'll deliver, and how. Being a significant user of your own API is really important, too; it'll give you the best sense of how well you've designed your responses, and what you might be missing.